package com.cuizhiwen;

/**
 * @author 01418061(cuizhiwen)
 * @Description:
 * @date 2019/1/3 9:57
 */
public class Java {
    /**
     * java语言特性:
     *      Java语言是简单的：
     *          Java语言的语法与C语言和C++语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java丢弃了C++中很少使用的、很难理解的、令人迷惑的那些特性，
     *          如操作符重载、多继承、自动的强制类型转换。特别地，Java语言不使用指针，而是引用。并提供了自动的废料收集，使得程序员不必为内存管理而担忧。
     *
     *      Java语言是面向对象的：
     *          Java语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，
     *          并支持类与接口之间的实现机制（关键字为implements）。Java语言全面支持动态绑定，而C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。
     *
     *      Java语言是分布式的：
     *          Java语言支持Internet应用的开发，在基本的Java应用编程接口中有一个网络应用编程接口（java net），
     *          它提供了用于网络应用编程的类库，包括URL、URLConnection、Socket、ServerSocket等。Java的RMI（远程方法激活）机制也是开发分布式应用的重要手段。
     *
     *      Java语言是健壮的：
     *          Java的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。对指针的丢弃是Java的明智选择。Java的安全检查机制使得Java更具健壮性。
     *
     *      Java语言是安全的：
     *          Java通常被用在网络环境中，为此，Java提供了一个安全机制以防恶意代码的攻击。除了Java语言具有的许多安全特性以外，Java对通过网络下载的类具有一个安全防范机制（类ClassLoader），
     *          如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制（类SecurityManager）让Java应用设置安全哨兵。
     *
     *      Java语言是体系结构中立的：
     *          Java程序（后缀为java的文件）在Java平台上被编译为体系结构中立的字节码格式（后缀为class的文件），然后可以在实现这个Java平台的任何系统中运行。这种途径适合于异构的网络环境和软件的分发。
     *
     *      Java语言是可移植的：
     *          这种可移植性来源于体系结构中立性，另外，Java还严格规定了各个基本数据类型的长度。Java系统本身也具有很强的可移植性，Java编译器是用Java实现的，Java的运行环境是用ANSI C实现的。
     *
     *      Java语言是解释型的：
     *          如前所述，Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统中运行。在运行时，Java平台中的Java解释器对这些字节码进行解释执行，执行过程中需要的类在联接阶段被载入到运行环境中。
     *
     *      Java是高性能的：
     *          与那些解释型的高级脚本语言相比，Java的确是高性能的。事实上，Java的运行速度随着JIT(Just-In-Time）编译器技术的发展越来越接近于C++。
     *
     *      Java语言是多线程的：
     *          在Java语言中，线程是一种特殊的对象，它必须由Thread类或其子（孙）类来创建。通常有两种方法来创建线程：
     *          其一，使用型构为Thread(Runnable)的构造子将一个实现了Runnable接口的对象包装成一个线程，
     *          其二，从Thread类派生出子类并重写run方法，使用该子类创建的对象即为线程。值得注意的是Thread类已经实现了Runnable接口，
     *          因此，任何一个线程均有它的run方法，而run方法中包含了线程所要运行的代码。线程的活动由一组方法来控制。
     *          Java语言支持多个线程的同时执行，并提供多线程之间的同步机制（关键字为synchronized）。
     *
     *      Java语言是动态的：
     *          Java语言的设计目标之一是适应于动态变化的环境。Java程序需要的类能够动态地被载入到运行环境，也可以通过网络来载入所需要的类。
     *          这也有利于软件的升级。另外，Java中的类有一个运行时刻的表示，能进行运行时刻的类型检查。
     * 基础语法:
     *      对象：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。
     *      类：类是一个模板，它描述一类对象的行为和状态。
     *      方法：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。
     *      实例变量：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。
     *
     * java标识符:
     *      1>所有的标识符都应该以字母（A-Z或者a-z）,美元符（$）、或者下划线（_）开始
     *      2>首字符之后可以是字母（A-Z或者a-z）,美元符（$）、下划线（_）或数字的任何字符组合
     *
     * java修饰符:
     *      像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：
     *      访问控制修饰符 : default, public , protected, private
     *      非访问控制修饰符 : final, abstract, static, synchronized
     *
     * Java变量：
     *      局部变量 :在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。
     *      类变量（静态变量）：类变量也声明在类中，方法体之外，但必须声明为static类型。
     *      成员变量（非静态变量） :成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。
     *
     * Java数组:
     *      数组是储存在堆上的对象，可以保存多个同类型变量。
     * Java枚举：
     *      Java 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的bug。
     *
     * 继承：
     *      在Java中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。
     *      利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（subclass）。
     * 接口:
     *      在Java中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。
     *      接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。
     * 创建对象：
     *      对象是根据类创建的。在Java中，使用关键字new来创建一个新的对象。创建对象需要以下三步：
     *      1>声明：声明一个对象，包括对象名称和对象类型。
     *      2>实例化：使用关键字new来创建一个对象。
     *      3>初始化：使用new创建对象时，会调用构造方法初始化对象。
     * Java包:
     *      包主要用来对类和接口进行分类。当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。
     * Import语句：
     *      在Java中，如果给出一个完整的限定名，包括包名、类名，那么Java编译器就可以很容易地定位到源代码或者类。
     *      Import语句就是用来提供一个合理的路径，使得编译器可以找到某个类。
     */
}
