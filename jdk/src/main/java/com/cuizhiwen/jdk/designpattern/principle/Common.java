package com.cuizhiwen.jdk.designpattern.principle;

public class Common {
    /**
     * 高内聚：尽可能把模块内部数据，功能实现细节隐藏在模块内部，让一个类专注做一件事，模块中各元素联系紧密。
     * 低耦合：仅暴露少量方法给外部使用。多个类对象之间减少耦合性。
     *        耦合分为：依赖 关联 聚合 组合。
     *
     * 六大原则:
     *        总原则:开闭原则
     *              对扩展开放，对修改关闭。需要扩展时，不改动源代码。使用接口和抽象类。
     *        1、单一职责原则：
     *              每个类应该实现单一职责，不然则拆分。
     *        2、里氏替换原则：
     *              LSP，是面向对象的基本原则，任何父类出现的地方，子类一定可以出现。
     *              lsp是继承复用的基石，是抽象化具体步骤的规范。
     *        3、依赖倒转原则:
     *              开闭原则基础上，面向接口编程。
     *              依赖于抽象而不依赖于具体。
     *        4、接口隔离原则:
     *              接口中不存在子类用不到，却要实现的方法。
     *        5、迪米特法则:
     *              一个类对自己依赖的类知道的越少越好，不论别依赖的类多复杂都应把逻辑封装在方法内部，通过公共方法提供给外部。
     *        6、合成复用原则：
     *              尽量使用合成，聚合，而不用继承。
     */
}
