package com.cuizhiwen.jdk.jvm;

/**
 * @author 01418061(cuizhiwen)
 * @Description:
 * @date 2019/3/1 10:47
 */
public class SoftReference {
    /**
     * 软引用（SoftReference）
     *          如果一个对象只具有软引用，那么如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，
     *          该对象就可以被程序使用。软引用可用来实现内存敏感的高感恩于心，回报于行。 面试宝典系列-Java速缓存。软引用可以和一个引用队列（ReferenceQueue）
     *          联合使用如果软引用所引用的对象被垃圾回收，Java 虚拟机就会把这个软引用加入到与之关联的引用队列中。软引用是主要用于内存敏感的高速缓存。
     *          在 jvm 报告内存不足之前会清除所有的软引用，这样以来 gc 就有可能收集软可及的对象，可能解决内存吃紧问题，避免内存溢出。
     *  什么时候会被收集取决于 gc 的算法和 gc 运行时可用内存的大小。当 gc 决定要收集软引用时执行以下过程,以上面的 softRef 为例：
     *  1 首先将 softRef 的 referent（abc）设置为 null，不再引用 heap 中的 new String("abc")对象。
     *  2 将 heap 中的 new String("abc")对象设置为可结束的(finalizable)。
     *  3 当 heap 中的 new String("abc")对象的 finalize()方法被运行而且该对象占用的内存被释放，
     *      softRef被添加到它的 ReferenceQueue(如果有的话)中。
     * 注意:对 ReferenceQueue 软引用和弱引用可以有可无，但是虚引用必须有。 被 Soft Reference 指到的对象，即使没有任何 Direct Reference，也不会被清除。
     *      一直要到 JVM 内存不足且没有 Direct Reference 时才会清除，SoftReference 是用来设计 object-cache 之用的。
     *      如此一来SoftReference 不但可以把对象 cache 起来，也不会造成内存不足的错误 （OutOfMemoryError）。
     *
     * 弱引用（WeakReference）
     *      如果一个对象只具有弱引用，那该类就是可有可无的对象，因为只要该对象被 gc 扫描到了随时都会把它干
     *      掉。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖
     *      的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，
     *      由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。
     *      弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java 虚
     *      拟机就会把这个弱引用加入到与之关联的引用队列中。
     *
     * 虚引用（PhantomReference）
     *      "虚引用"顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对
     *      象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收。虚引用主要用来跟踪对象被垃
     *      圾回收的活动。
     *      虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列（ReferenceQueue）联合使用。当垃圾回
     *      收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联
     *      的引用队列中。程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。
     *      程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。
     *      建立虚引用之后通过 get 方法返回结果始终为 null,通过源代码你会发现,虚引用通向会把引用的对象写进
     *      referent,只是 get 方法返回结果为 null。先看一下和 gc 交互的过程再说一下他的作用。
     *          1 不把 referent 设置为 null, 直接把 heap 中的 new String("abc")对象设置为可结束的(finalizable)。
     *           2 与软引用和弱引用不同, 先把 PhantomRefrence 对象添加到它的 ReferenceQueue 中.然后在释放虚可及的对象。
     */
}
